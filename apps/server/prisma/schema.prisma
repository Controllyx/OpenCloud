// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Models
model User {
    id                   String            @id @default(cuid())
    username             String            @unique
    firstName            String?
    lastName             String?
    password             String
    role                 Role              @default(USER)
    rootFolderId         String?
    refreshTokens        RefreshToken[]
    uploadTokens         UploadToken[]
    accessControlRuleIds String[]
    defaultDisplayType   DisplayType       @default(GRID)
    displaySettings      DisplaySettings[]
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @default(now()) @updatedAt

    @@map("Users")
}

model AccessRule {
    id        String           @id @default(cuid())
    name      String
    type      AllowDisallow
    method    AccessRuleMethod
    match     String
    createdAt DateTime         @default(now())
    updatedAt DateTime         @default(now()) @updatedAt

    @@map("AccessRules")
}

model RefreshToken {
    id        String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    valid     Boolean  @default(true)
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@map("RefreshTokens")
}

model UploadToken {
    id                   String     @id @default(cuid())
    user                 User       @relation(fields: [userId], references: [id])
    userId               String
    description          String?
    folderId             String
    fileAccess           FileAccess
    accessControlRuleIds String[]
    createdAt            DateTime   @default(now())
    updatedAt            DateTime   @default(now()) @updatedAt

    @@map("UploadTokens")
}

model Folder {
    id             String     @id @default(cuid())
    folderName     String
    ownerId        String
    type           FolderType @default(STANDARD)
    parentFolder   Folder?    @relation("NestedFolder", fields: [parentFolderId], references: [id])
    parentFolderId String?
    childFolders   Folder[]   @relation("NestedFolder")
    childFiles     File[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @default(now()) @updatedAt

    @@map("Folders")
}

model File {
    id           String     @id @default(cuid())
    fileName     String
    fileSize     Int?
    fileType     String
    ownerId      String
    fileAccess   FileAccess @default(PRIVATE)
    parentFolder Folder     @relation(fields: [parentId], references: [id])
    parentId     String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @default(now()) @updatedAt

    @@map("Files")
}

model DisplaySettings {
    id          String        @id @default(cuid())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    folderId    String
    DisplayType DisplayType
    SortType    SortType
    SortOrder   SortDirection
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @default(now()) @updatedAt

    @@map("DisplayOrders")
}

// Enums
enum AllowDisallow {
    ALLOW
    DISALLOW
}

enum AccessRuleMethod {
    IP_ADDRESS
}

enum Role {
    ADMIN
    USER
}

enum FolderType {
    ROOT
    STANDARD
}

enum FileAccess {
    PRIVATE
    PROTECTED
    PUBLIC
}

enum DisplayType {
    GRID
    LIST
}

enum SortType {
    NAME
    DATE_CREATED
    SIZE
}

enum SortDirection {
    ASC
    DESC
}
